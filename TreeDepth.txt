二叉树的深度public int TreeDepth(TreeNode root) {       if(root==null)           return 0;        int leftDepth=TreeDepth(root.left);        int rightDepth=TreeDepth(root.right);        int max=(leftDepth>=rightDepth)?leftDepth:rightDepth;        return max+1;    }平衡二叉树public boolean IsBalanced_Solution(TreeNode root) {        if(root==null)            return true;        int leftDepth=TreeDepth(root.left);        int rightDepth=TreeDepth(root.right);        int diff=leftDepth-rightDepth;        if(diff>1||diff<-1)            return false;        return IsBalanced_Solution(root.left)&&IsBalanced_Solution(root.right);    }    int TreeDepth(TreeNode root) {       if(root==null)           return 0;        int leftDepth=TreeDepth(root.left);        int rightDepth=TreeDepth(root.right);        int max=(leftDepth>=rightDepth)?leftDepth:rightDepth;        return max+1;    }